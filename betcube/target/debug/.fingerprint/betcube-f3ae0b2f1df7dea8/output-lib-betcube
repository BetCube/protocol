{"$message_type":"diagnostic","message":"file not found for module `place_bet`","code":{"code":"E0583","explanation":"A file wasn't found for an out-of-line module.\n\nErroneous code example:\n\n```compile_fail,E0583\nmod file_that_doesnt_exist; // error: file not found for module\n\nfn main() {}\n```\n\nPlease be sure that a file corresponding to the module exists. If you\nwant to use a module named `file_that_doesnt_exist`, you need to have a file\nnamed `file_that_doesnt_exist.rs` or `file_that_doesnt_exist/mod.rs` in the\nsame directory.\n"},"level":"error","spans":[{"file_name":"src/betcube.rs","byte_start":106,"byte_end":124,"line_start":9,"line_end":9,"column_start":1,"column_end":19,"is_primary":true,"text":[{"text":"pub mod place_bet;","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to create the module `place_bet`, create file \"src/place_bet.rs\" or \"src/place_bet/mod.rs\"","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if there is a `mod place_bet` elsewhere in the crate already, import it with `use crate::...` instead","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0583]\u001b[0m\u001b[0m\u001b[1m: file not found for module `place_bet`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/betcube.rs:9:1\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub mod place_bet;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: to create the module `place_bet`, create file \"src/place_bet.rs\" or \"src/place_bet/mod.rs\"\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: if there is a `mod place_bet` elsewhere in the crate already, import it with `use crate::...` instead\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find type `Nfticket` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"src/p2e.rs","byte_start":3564,"byte_end":3572,"line_start":109,"line_end":109,"column_start":33,"column_end":41,"is_primary":true,"text":[{"text":"        .get_token_attributes::<Nfticket<Self::Api>>(num);","highlight_start":33,"highlight_end":41}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `Nfticket` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/p2e.rs:109:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        .get_token_attributes::<Nfticket<Self::Api>>(num);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find struct, variant or union type `Nfticket` in this scope","code":{"code":"E0422","explanation":"An identifier that is neither defined nor a struct was used.\n\nErroneous code example:\n\n```compile_fail,E0422\nfn main () {\n    let x = Foo { x: 1, y: 2 };\n}\n```\n\nIn this case, `Foo` is undefined, so it inherently isn't anything, and\ndefinitely not a struct.\n\n```compile_fail\nfn main () {\n    let foo = 1;\n    let x = foo { x: 1, y: 2 };\n}\n```\n\nIn this case, `foo` is defined, but is not a struct, so Rust can't use it as\none.\n"},"level":"error","spans":[{"file_name":"src/p2e.rs","byte_start":3721,"byte_end":3729,"line_start":111,"line_end":111,"column_start":30,"column_end":38,"is_primary":true,"text":[{"text":"        let new_attributes = Nfticket {","highlight_start":30,"highlight_end":38}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0422]\u001b[0m\u001b[0m\u001b[1m: cannot find struct, variant or union type `Nfticket` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/p2e.rs:111:30\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let new_attributes = Nfticket {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"cannot find value `NFT_AMOUNT` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src/p2e.rs","byte_start":4333,"byte_end":4343,"line_start":122,"line_end":122,"column_start":68,"column_end":78,"is_primary":true,"text":[{"text":"        self.send().direct_esdt(&caller, &nft, num, &BigUint::from(NFT_AMOUNT));","highlight_start":68,"highlight_end":78}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this constant","code":null,"level":"help","spans":[{"file_name":"src/p2e.rs","byte_start":1,"byte_end":1,"line_start":2,"line_end":2,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::{errors::{ERR_STREAM_TO_CALLER, ERR_STREAM_TO_SC, ERR_ZERO_DEPOSIT}, storage::{self, Bet, Betslip, BetslipAttributes}};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::constants::NFT_AMOUNT;\n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m: cannot find value `NFT_AMOUNT` in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/p2e.rs:122:68\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        self.send().direct_esdt(&caller, &nft, num, &BigUint::from(NFT_AMOUNT));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this constant\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[38;5;10m+ use crate::constants::NFT_AMOUNT;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `ContractObj<A>: betslip_nft::EndpointWrappers` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/betcube.rs","byte_start":208,"byte_end":234,"line_start":14,"line_end":14,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"#[multiversx_sc::contract]","highlight_start":1,"highlight_end":27}],"label":"the trait `betslip_nft::EndpointWrappers` is not implemented for `ContractObj<A>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/betcube.rs","byte_start":208,"byte_end":234,"line_start":14,"line_end":14,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"#[multiversx_sc::contract]","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[multiversx_sc::contract]","def_site_span":{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-derive-0.46.1/src/lib.rs","byte_start":425,"byte_end":541,"line_start":26,"line_end":29,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"pub fn contract(","highlight_start":1,"highlight_end":17},{"text":"    args: proc_macro::TokenStream,","highlight_start":1,"highlight_end":35},{"text":"    input: proc_macro::TokenStream,","highlight_start":1,"highlight_end":36},{"text":") -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `betslip_nft::EndpointWrappers`:\n  p2e::ContractObj<A>\n  betslip_nft::ContractObj<A>\n  UniversalContractObj<A>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `p2e::EndpointWrappers`","code":null,"level":"note","spans":[{"file_name":"src/p2e.rs","byte_start":196,"byte_end":220,"line_start":8,"line_end":8,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":"required by this bound in `EndpointWrappers`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/p2e.rs","byte_start":196,"byte_end":220,"line_start":8,"line_end":8,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[multiversx_sc::module]","def_site_span":{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-derive-0.46.1/src/lib.rs","byte_start":621,"byte_end":735,"line_start":34,"line_end":37,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"pub fn module(","highlight_start":1,"highlight_end":15},{"text":"    args: proc_macro::TokenStream,","highlight_start":1,"highlight_end":35},{"text":"    input: proc_macro::TokenStream,","highlight_start":1,"highlight_end":36},{"text":") -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `ContractObj<A>: betslip_nft::EndpointWrappers` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/betcube.rs:14:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[multiversx_sc::contract]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `betslip_nft::EndpointWrappers` is not implemented for `ContractObj<A>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `betslip_nft::EndpointWrappers`:\u001b[0m\n\u001b[0m             p2e::ContractObj<A>\u001b[0m\n\u001b[0m             betslip_nft::ContractObj<A>\u001b[0m\n\u001b[0m             UniversalContractObj<A>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `p2e::EndpointWrappers`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/p2e.rs:8:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[multiversx_sc::module]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `EndpointWrappers`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `multiversx_sc::contract` which comes from the expansion of the attribute macro `multiversx_sc::module` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `ContractObj<A>: betslip_nft::AutoImpl` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/betcube.rs","byte_start":208,"byte_end":234,"line_start":14,"line_end":14,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"#[multiversx_sc::contract]","highlight_start":1,"highlight_end":27}],"label":"the trait `betslip_nft::AutoImpl` is not implemented for `ContractObj<A>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/betcube.rs","byte_start":208,"byte_end":234,"line_start":14,"line_end":14,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"#[multiversx_sc::contract]","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[multiversx_sc::contract]","def_site_span":{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-derive-0.46.1/src/lib.rs","byte_start":425,"byte_end":541,"line_start":26,"line_end":29,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"pub fn contract(","highlight_start":1,"highlight_end":17},{"text":"    args: proc_macro::TokenStream,","highlight_start":1,"highlight_end":35},{"text":"    input: proc_macro::TokenStream,","highlight_start":1,"highlight_end":36},{"text":") -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `betslip_nft::AutoImpl`:\n  p2e::ContractObj<A>\n  betslip_nft::ContractObj<A>\n  UniversalContractObj<A>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `ContractObj<A>` to implement `BetslipNftModule`","code":null,"level":"note","spans":[{"file_name":"src/betslip_nft.rs","byte_start":255,"byte_end":279,"line_start":10,"line_end":10,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/betslip_nft.rs","byte_start":255,"byte_end":279,"line_start":10,"line_end":10,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[multiversx_sc::module]","def_site_span":{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-derive-0.46.1/src/lib.rs","byte_start":621,"byte_end":735,"line_start":34,"line_end":37,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"pub fn module(","highlight_start":1,"highlight_end":15},{"text":"    args: proc_macro::TokenStream,","highlight_start":1,"highlight_end":35},{"text":"    input: proc_macro::TokenStream,","highlight_start":1,"highlight_end":36},{"text":") -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/betslip_nft.rs","byte_start":290,"byte_end":306,"line_start":11,"line_end":11,"column_start":11,"column_end":27,"is_primary":true,"text":[{"text":"pub trait BetslipNftModule:","highlight_start":11,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required for `ContractObj<A>` to implement `betslip_nft::EndpointWrappers`","code":null,"level":"note","spans":[{"file_name":"src/betslip_nft.rs","byte_start":255,"byte_end":279,"line_start":10,"line_end":10,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/betslip_nft.rs","byte_start":255,"byte_end":279,"line_start":10,"line_end":10,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[multiversx_sc::module]","def_site_span":{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-derive-0.46.1/src/lib.rs","byte_start":621,"byte_end":735,"line_start":34,"line_end":37,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"pub fn module(","highlight_start":1,"highlight_end":15},{"text":"    args: proc_macro::TokenStream,","highlight_start":1,"highlight_end":35},{"text":"    input: proc_macro::TokenStream,","highlight_start":1,"highlight_end":36},{"text":") -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"required by a bound in `p2e::EndpointWrappers`","code":null,"level":"note","spans":[{"file_name":"src/p2e.rs","byte_start":196,"byte_end":220,"line_start":8,"line_end":8,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":"required by this bound in `EndpointWrappers`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/p2e.rs","byte_start":196,"byte_end":220,"line_start":8,"line_end":8,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[multiversx_sc::module]","def_site_span":{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-derive-0.46.1/src/lib.rs","byte_start":621,"byte_end":735,"line_start":34,"line_end":37,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"pub fn module(","highlight_start":1,"highlight_end":15},{"text":"    args: proc_macro::TokenStream,","highlight_start":1,"highlight_end":35},{"text":"    input: proc_macro::TokenStream,","highlight_start":1,"highlight_end":36},{"text":") -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `ContractObj<A>: betslip_nft::AutoImpl` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/betcube.rs:14:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[multiversx_sc::contract]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `betslip_nft::AutoImpl` is not implemented for `ContractObj<A>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `betslip_nft::AutoImpl`:\u001b[0m\n\u001b[0m             p2e::ContractObj<A>\u001b[0m\n\u001b[0m             betslip_nft::ContractObj<A>\u001b[0m\n\u001b[0m             UniversalContractObj<A>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `ContractObj<A>` to implement `BetslipNftModule`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/betslip_nft.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[multiversx_sc::module]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BetslipNftModule:\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `ContractObj<A>` to implement `betslip_nft::EndpointWrappers`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/betslip_nft.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[multiversx_sc::module]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `p2e::EndpointWrappers`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/p2e.rs:8:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[multiversx_sc::module]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `EndpointWrappers`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `multiversx_sc::contract` which comes from the expansion of the attribute macro `multiversx_sc::module` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `ContractObj<A>: betslip_nft::EndpointWrappers` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/betcube.rs","byte_start":208,"byte_end":234,"line_start":14,"line_end":14,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"#[multiversx_sc::contract]","highlight_start":1,"highlight_end":27}],"label":"the trait `betslip_nft::EndpointWrappers` is not implemented for `ContractObj<A>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/betcube.rs","byte_start":208,"byte_end":234,"line_start":14,"line_end":14,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"#[multiversx_sc::contract]","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[multiversx_sc::contract]","def_site_span":{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-derive-0.46.1/src/lib.rs","byte_start":425,"byte_end":541,"line_start":26,"line_end":29,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"pub fn contract(","highlight_start":1,"highlight_end":17},{"text":"    args: proc_macro::TokenStream,","highlight_start":1,"highlight_end":35},{"text":"    input: proc_macro::TokenStream,","highlight_start":1,"highlight_end":36},{"text":") -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `betslip_nft::EndpointWrappers`:\n  p2e::ContractObj<A>\n  betslip_nft::ContractObj<A>\n  UniversalContractObj<A>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `ContractObj<A>` to implement `p2e::EndpointWrappers`","code":null,"level":"note","spans":[{"file_name":"src/p2e.rs","byte_start":196,"byte_end":220,"line_start":8,"line_end":8,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/p2e.rs","byte_start":196,"byte_end":220,"line_start":8,"line_end":8,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[multiversx_sc::module]","def_site_span":{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-derive-0.46.1/src/lib.rs","byte_start":621,"byte_end":735,"line_start":34,"line_end":37,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"pub fn module(","highlight_start":1,"highlight_end":15},{"text":"    args: proc_macro::TokenStream,","highlight_start":1,"highlight_end":35},{"text":"    input: proc_macro::TokenStream,","highlight_start":1,"highlight_end":36},{"text":") -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"required by a bound in `EndpointWrappers`","code":null,"level":"note","spans":[{"file_name":"src/betcube.rs","byte_start":208,"byte_end":234,"line_start":14,"line_end":14,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"#[multiversx_sc::contract]","highlight_start":1,"highlight_end":27}],"label":"required by this bound in `EndpointWrappers`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/betcube.rs","byte_start":208,"byte_end":234,"line_start":14,"line_end":14,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"#[multiversx_sc::contract]","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[multiversx_sc::contract]","def_site_span":{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-derive-0.46.1/src/lib.rs","byte_start":425,"byte_end":541,"line_start":26,"line_end":29,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"pub fn contract(","highlight_start":1,"highlight_end":17},{"text":"    args: proc_macro::TokenStream,","highlight_start":1,"highlight_end":35},{"text":"    input: proc_macro::TokenStream,","highlight_start":1,"highlight_end":36},{"text":") -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `ContractObj<A>: betslip_nft::EndpointWrappers` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/betcube.rs:14:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[multiversx_sc::contract]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `betslip_nft::EndpointWrappers` is not implemented for `ContractObj<A>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `betslip_nft::EndpointWrappers`:\u001b[0m\n\u001b[0m             p2e::ContractObj<A>\u001b[0m\n\u001b[0m             betslip_nft::ContractObj<A>\u001b[0m\n\u001b[0m             UniversalContractObj<A>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `ContractObj<A>` to implement `p2e::EndpointWrappers`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/p2e.rs:8:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[multiversx_sc::module]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `EndpointWrappers`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/betcube.rs:14:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[multiversx_sc::contract]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `EndpointWrappers`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `multiversx_sc::contract` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `ContractObj<A>: betslip_nft::AutoImpl` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/betcube.rs","byte_start":208,"byte_end":234,"line_start":14,"line_end":14,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"#[multiversx_sc::contract]","highlight_start":1,"highlight_end":27}],"label":"the trait `betslip_nft::AutoImpl` is not implemented for `ContractObj<A>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/betcube.rs","byte_start":208,"byte_end":234,"line_start":14,"line_end":14,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"#[multiversx_sc::contract]","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[multiversx_sc::contract]","def_site_span":{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-derive-0.46.1/src/lib.rs","byte_start":425,"byte_end":541,"line_start":26,"line_end":29,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"pub fn contract(","highlight_start":1,"highlight_end":17},{"text":"    args: proc_macro::TokenStream,","highlight_start":1,"highlight_end":35},{"text":"    input: proc_macro::TokenStream,","highlight_start":1,"highlight_end":36},{"text":") -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `betslip_nft::AutoImpl`:\n  p2e::ContractObj<A>\n  betslip_nft::ContractObj<A>\n  UniversalContractObj<A>","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `ContractObj<A>` to implement `BetslipNftModule`","code":null,"level":"note","spans":[{"file_name":"src/betslip_nft.rs","byte_start":255,"byte_end":279,"line_start":10,"line_end":10,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/betslip_nft.rs","byte_start":255,"byte_end":279,"line_start":10,"line_end":10,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[multiversx_sc::module]","def_site_span":{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-derive-0.46.1/src/lib.rs","byte_start":621,"byte_end":735,"line_start":34,"line_end":37,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"pub fn module(","highlight_start":1,"highlight_end":15},{"text":"    args: proc_macro::TokenStream,","highlight_start":1,"highlight_end":35},{"text":"    input: proc_macro::TokenStream,","highlight_start":1,"highlight_end":36},{"text":") -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src/betslip_nft.rs","byte_start":290,"byte_end":306,"line_start":11,"line_end":11,"column_start":11,"column_end":27,"is_primary":true,"text":[{"text":"pub trait BetslipNftModule:","highlight_start":11,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required for `ContractObj<A>` to implement `betslip_nft::EndpointWrappers`","code":null,"level":"note","spans":[{"file_name":"src/betslip_nft.rs","byte_start":255,"byte_end":279,"line_start":10,"line_end":10,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/betslip_nft.rs","byte_start":255,"byte_end":279,"line_start":10,"line_end":10,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[multiversx_sc::module]","def_site_span":{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-derive-0.46.1/src/lib.rs","byte_start":621,"byte_end":735,"line_start":34,"line_end":37,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"pub fn module(","highlight_start":1,"highlight_end":15},{"text":"    args: proc_macro::TokenStream,","highlight_start":1,"highlight_end":35},{"text":"    input: proc_macro::TokenStream,","highlight_start":1,"highlight_end":36},{"text":") -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"required for `ContractObj<A>` to implement `p2e::EndpointWrappers`","code":null,"level":"note","spans":[{"file_name":"src/p2e.rs","byte_start":196,"byte_end":220,"line_start":8,"line_end":8,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/p2e.rs","byte_start":196,"byte_end":220,"line_start":8,"line_end":8,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[multiversx_sc::module]","def_site_span":{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-derive-0.46.1/src/lib.rs","byte_start":621,"byte_end":735,"line_start":34,"line_end":37,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"pub fn module(","highlight_start":1,"highlight_end":15},{"text":"    args: proc_macro::TokenStream,","highlight_start":1,"highlight_end":35},{"text":"    input: proc_macro::TokenStream,","highlight_start":1,"highlight_end":36},{"text":") -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"required by a bound in `EndpointWrappers`","code":null,"level":"note","spans":[{"file_name":"src/betcube.rs","byte_start":208,"byte_end":234,"line_start":14,"line_end":14,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"#[multiversx_sc::contract]","highlight_start":1,"highlight_end":27}],"label":"required by this bound in `EndpointWrappers`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/betcube.rs","byte_start":208,"byte_end":234,"line_start":14,"line_end":14,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"#[multiversx_sc::contract]","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[multiversx_sc::contract]","def_site_span":{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-derive-0.46.1/src/lib.rs","byte_start":425,"byte_end":541,"line_start":26,"line_end":29,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"pub fn contract(","highlight_start":1,"highlight_end":17},{"text":"    args: proc_macro::TokenStream,","highlight_start":1,"highlight_end":35},{"text":"    input: proc_macro::TokenStream,","highlight_start":1,"highlight_end":36},{"text":") -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `ContractObj<A>: betslip_nft::AutoImpl` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/betcube.rs:14:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[multiversx_sc::contract]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `betslip_nft::AutoImpl` is not implemented for `ContractObj<A>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: the following other types implement trait `betslip_nft::AutoImpl`:\u001b[0m\n\u001b[0m             p2e::ContractObj<A>\u001b[0m\n\u001b[0m             betslip_nft::ContractObj<A>\u001b[0m\n\u001b[0m             UniversalContractObj<A>\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `ContractObj<A>` to implement `BetslipNftModule`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/betslip_nft.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[multiversx_sc::module]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BetslipNftModule:\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `ContractObj<A>` to implement `betslip_nft::EndpointWrappers`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/betslip_nft.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[multiversx_sc::module]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `ContractObj<A>` to implement `p2e::EndpointWrappers`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/p2e.rs:8:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[multiversx_sc::module]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `EndpointWrappers`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/betcube.rs:14:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[multiversx_sc::contract]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `EndpointWrappers`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `multiversx_sc::contract` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Proxy<A>: betslip_nft::ProxyTrait` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/betcube.rs","byte_start":208,"byte_end":234,"line_start":14,"line_end":14,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"#[multiversx_sc::contract]","highlight_start":1,"highlight_end":27}],"label":"the trait `betslip_nft::ProxyTrait` is not implemented for `Proxy<A>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/betcube.rs","byte_start":208,"byte_end":234,"line_start":14,"line_end":14,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"#[multiversx_sc::contract]","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[multiversx_sc::contract]","def_site_span":{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-derive-0.46.1/src/lib.rs","byte_start":425,"byte_end":541,"line_start":26,"line_end":29,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"pub fn contract(","highlight_start":1,"highlight_end":17},{"text":"    args: proc_macro::TokenStream,","highlight_start":1,"highlight_end":35},{"text":"    input: proc_macro::TokenStream,","highlight_start":1,"highlight_end":36},{"text":") -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this trait has no implementations, consider adding one","code":null,"level":"help","spans":[{"file_name":"src/betslip_nft.rs","byte_start":255,"byte_end":279,"line_start":10,"line_end":10,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/betslip_nft.rs","byte_start":255,"byte_end":279,"line_start":10,"line_end":10,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[multiversx_sc::module]","def_site_span":{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-derive-0.46.1/src/lib.rs","byte_start":621,"byte_end":735,"line_start":34,"line_end":37,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"pub fn module(","highlight_start":1,"highlight_end":15},{"text":"    args: proc_macro::TokenStream,","highlight_start":1,"highlight_end":35},{"text":"    input: proc_macro::TokenStream,","highlight_start":1,"highlight_end":36},{"text":") -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"required by a bound in `p2e::ProxyTrait`","code":null,"level":"note","spans":[{"file_name":"src/p2e.rs","byte_start":196,"byte_end":220,"line_start":8,"line_end":8,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":"required by this bound in `ProxyTrait`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/p2e.rs","byte_start":196,"byte_end":220,"line_start":8,"line_end":8,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[multiversx_sc::module]","def_site_span":{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-derive-0.46.1/src/lib.rs","byte_start":621,"byte_end":735,"line_start":34,"line_end":37,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"pub fn module(","highlight_start":1,"highlight_end":15},{"text":"    args: proc_macro::TokenStream,","highlight_start":1,"highlight_end":35},{"text":"    input: proc_macro::TokenStream,","highlight_start":1,"highlight_end":36},{"text":") -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Proxy<A>: betslip_nft::ProxyTrait` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/betcube.rs:14:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[multiversx_sc::contract]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `betslip_nft::ProxyTrait` is not implemented for `Proxy<A>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: this trait has no implementations, consider adding one\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/betslip_nft.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[multiversx_sc::module]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `p2e::ProxyTrait`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/p2e.rs:8:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[multiversx_sc::module]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ProxyTrait`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `multiversx_sc::contract` which comes from the expansion of the attribute macro `multiversx_sc::module` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Proxy<A>: betslip_nft::ProxyTrait` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/betcube.rs","byte_start":208,"byte_end":234,"line_start":14,"line_end":14,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"#[multiversx_sc::contract]","highlight_start":1,"highlight_end":27}],"label":"the trait `betslip_nft::ProxyTrait` is not implemented for `Proxy<A>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/betcube.rs","byte_start":208,"byte_end":234,"line_start":14,"line_end":14,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"#[multiversx_sc::contract]","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[multiversx_sc::contract]","def_site_span":{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-derive-0.46.1/src/lib.rs","byte_start":425,"byte_end":541,"line_start":26,"line_end":29,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"pub fn contract(","highlight_start":1,"highlight_end":17},{"text":"    args: proc_macro::TokenStream,","highlight_start":1,"highlight_end":35},{"text":"    input: proc_macro::TokenStream,","highlight_start":1,"highlight_end":36},{"text":") -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"this trait has no implementations, consider adding one","code":null,"level":"help","spans":[{"file_name":"src/betslip_nft.rs","byte_start":255,"byte_end":279,"line_start":10,"line_end":10,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/betslip_nft.rs","byte_start":255,"byte_end":279,"line_start":10,"line_end":10,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[multiversx_sc::module]","def_site_span":{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-derive-0.46.1/src/lib.rs","byte_start":621,"byte_end":735,"line_start":34,"line_end":37,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"pub fn module(","highlight_start":1,"highlight_end":15},{"text":"    args: proc_macro::TokenStream,","highlight_start":1,"highlight_end":35},{"text":"    input: proc_macro::TokenStream,","highlight_start":1,"highlight_end":36},{"text":") -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"required for `Proxy<A>` to implement `p2e::ProxyTrait`","code":null,"level":"note","spans":[{"file_name":"src/p2e.rs","byte_start":196,"byte_end":220,"line_start":8,"line_end":8,"column_start":1,"column_end":25,"is_primary":true,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/p2e.rs","byte_start":196,"byte_end":220,"line_start":8,"line_end":8,"column_start":1,"column_end":25,"is_primary":false,"text":[{"text":"#[multiversx_sc::module]","highlight_start":1,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[multiversx_sc::module]","def_site_span":{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-derive-0.46.1/src/lib.rs","byte_start":621,"byte_end":735,"line_start":34,"line_end":37,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"pub fn module(","highlight_start":1,"highlight_end":15},{"text":"    args: proc_macro::TokenStream,","highlight_start":1,"highlight_end":35},{"text":"    input: proc_macro::TokenStream,","highlight_start":1,"highlight_end":36},{"text":") -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null},{"message":"required by a bound in `ProxyTrait`","code":null,"level":"note","spans":[{"file_name":"src/betcube.rs","byte_start":208,"byte_end":234,"line_start":14,"line_end":14,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"#[multiversx_sc::contract]","highlight_start":1,"highlight_end":27}],"label":"required by this bound in `ProxyTrait`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/betcube.rs","byte_start":208,"byte_end":234,"line_start":14,"line_end":14,"column_start":1,"column_end":27,"is_primary":false,"text":[{"text":"#[multiversx_sc::contract]","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[multiversx_sc::contract]","def_site_span":{"file_name":"/Users/andrewkhirita/.cargo/registry/src/index.crates.io-6f17d22bba15001f/multiversx-sc-derive-0.46.1/src/lib.rs","byte_start":425,"byte_end":541,"line_start":26,"line_end":29,"column_start":1,"column_end":29,"is_primary":false,"text":[{"text":"pub fn contract(","highlight_start":1,"highlight_end":17},{"text":"    args: proc_macro::TokenStream,","highlight_start":1,"highlight_end":35},{"text":"    input: proc_macro::TokenStream,","highlight_start":1,"highlight_end":36},{"text":") -> proc_macro::TokenStream {","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: the trait bound `Proxy<A>: betslip_nft::ProxyTrait` is not satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/betcube.rs:14:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[multiversx_sc::contract]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `betslip_nft::ProxyTrait` is not implemented for `Proxy<A>`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: this trait has no implementations, consider adding one\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/betslip_nft.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[multiversx_sc::module]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required for `Proxy<A>` to implement `p2e::ProxyTrait`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/p2e.rs:8:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[multiversx_sc::module]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `ProxyTrait`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/betcube.rs:14:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[multiversx_sc::contract]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `ProxyTrait`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `multiversx_sc::contract` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 10 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 10 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0412, E0422, E0425, E0583.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0412, E0422, E0425, E0583.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
